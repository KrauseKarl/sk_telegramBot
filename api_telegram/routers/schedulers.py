import locale

from aiogram import Router, F, types
from aiogram.filters import Command

from api_telegram.crud.scheduler import remove_job, create_item_search
from utils.media import *
import matplotlib.pyplot as plt

scheduler = Router()


@scheduler.callback_query(F.data.startswith("item_search"))
async def add_search(callback: types.CallbackQuery):
    # try:
    item_id = callback.data.split(":")[1]
    await create_item_search(item_id, callback.from_user.id)
    await callback.answer(
        f"–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å '{item_id}' –¥–æ–±–∞–≤–ª–µ–Ω.",
        show_alert=True
    )


# except Exception as error:
#     print('error = ', error)
#     await callback.answer(str(error), show_alert=True)


# –ö–æ–º–∞–Ω–¥–∞ /list_searches
@scheduler.callback_query(F.data.startswith("list_searches"))
async def list_searches(callback: types.CallbackQuery):
    try:
        searched_items = ItemSearch.select().where(ItemSearch.user == callback.from_user.id)
        if not searched_items:
            await callback.message.answer("–ü–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
            return

        msg = "–°–ø–∏—Å–æ–∫ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤:\n"
        for item_search in searched_items:
            msg += "{0:.50} (ID: {1})\n".format(item_search.title, item_search.product_id)
            photo = InputMediaPhoto(media=item_search.image, caption=msg)
            await callback.message.edit_media(media=photo)
    except Exception as error:
        await callback.answer(str(error))


# –ö–æ–º–∞–Ω–¥–∞ /delete_search
@scheduler.message(Command("delete_search"))
async def delete_search(message: types.Message):
    # –ü—Ä–∏–º–µ—Ä: –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã
    args = message.text.split()
    if len(args) < 2:
        await message.answer("–£–∫–∞–∂–∏—Ç–µ ID –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: /delete_search <item_search_id>")
        return

    try:
        item_search_id = int(args[1])
        item_search = ItemSearch.get_by_id(item_search_id)
    except (ValueError, ItemSearch.DoesNotExist):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.")
        return

    # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    remove_job(item_search.id)

    # –£–¥–∞–ª—è–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    item_search.delete_instance()
    await message.answer(f"–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å '{item_search.name}' (ID: {item_search.id}) —É–¥–∞–ª–µ–Ω.")


# –ö–æ–º–∞–Ω–¥–∞ /graph
# –ö–æ–º–∞–Ω–¥–∞ /graph
@scheduler.message(Command("graph"))
async def send_graph(message: types.Message):
    # –ü—Ä–∏–º–µ—Ä: –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã
    try:
        print(message.text)
        args = message.text.split()
        if len(args) < 2:
            await message.answer("–£–∫–∞–∂–∏—Ç–µ ID –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: /graph <item_search_id>")
            return

        try:
            item_search_id = int(args[1])
            item_search = ItemSearch.select().where(ItemSearch.uid == item_search_id).get_or_none()
            if item_search is None:
                raise ValueError
        except (ValueError, ItemSearch.DoesNotExist):
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø–æ–∏—Å–∫–æ–≤—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
        entries = DataEntry.select().where(DataEntry.item_search == item_search).order_by(DataEntry.date)

        if not entries:
            await message.answer("–î–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
            return

        locale.setlocale(category=locale.LC_ALL, locale="Russian")
        # todo create def graf_bar_maker()
        values = [entry.value for entry in entries]
        timestamps = [entry.date.strftime('%b %d') for entry in entries]
        plt.style.use('dark_background')
        plt.figure(figsize=(20, 9), dpi=300)
        plt.ylim(min(values) - min(values) * 0.25, max(values) + min(values) * 0.25)
        plt.plot(timestamps, values, color='grey', marker="o", markersize=20, linewidth=5)

        # todo func `if min value is not the only`
        def last_elem(x_axis, y_axis, sort_value):
            result_dict = dict()
            for x, y in zip(x_axis, y_axis):
                if sort_value == 'min':
                    if min(values) == y:
                        result_dict[x] = y
                if sort_value == 'max':
                    if max(values) == y:
                        result_dict[x] = y
            last_item = sorted(result_dict.items())[-1]
            return last_item[0], last_item[1]

        # todo func `if min value is not the only`
        max_time_value, max_value = last_elem(timestamps, values, "max")
        min_time_value, min_value = last_elem(timestamps, values, "min")
        for x, y in zip(timestamps, values):
            max_time_value, max_value = last_elem(timestamps, values, "max")
            min_time_value, min_value = last_elem(timestamps, values, "min")
            if x == max_time_value:
                plt.text(x, y, f'{y}', fontsize=20, ha='center', va='bottom', color='white',
                         bbox=dict(facecolor='red', alpha=0.8))
            if x == min_time_value:
                plt.text(x, y, f'{y}', fontsize=20, ha='center', va='bottom', color='white',
                         bbox=dict(facecolor='green', alpha=0.8))
            if values[-1] == y:
                plt.text(x, y, f'{y}', fontsize=20, ha='center', va='bottom', color='white',
                         bbox=dict(facecolor='orange', alpha=0.8))

        plt.text(0.99, 0.99,  # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (x, y) –≤ –¥–æ–ª—è—Ö –æ—Ç —Ä–∞–∑–º–µ—Ä–æ–≤ –≥—Ä–∞—Ñ–∏–∫–∞ (0.95 ‚Äî –ø–æ—á—Ç–∏ –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É)
                 f'–ú–∞–∫—Å–∏–º—É–º: {max(values)}',  # –¢–µ–∫—Å—Ç –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏
                 horizontalalignment='right',  # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ –ø—Ä–∞–≤–æ–º—É –∫—Ä–∞—é
                 verticalalignment='top',  # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ –≤–µ—Ä—Ö–Ω–µ–º—É –∫—Ä–∞—é
                 transform=plt.gca().transAxes,  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç (–¥–æ–ª–∏ –≥—Ä–∞—Ñ–∏–∫–∞)
                 fontsize=25, color='white', bbox=dict(facecolor='red', alpha=0.8))  # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —à—Ä–∏—Ñ—Ç–∞ –∏ —Ü–≤–µ—Ç–∞
        plt.text(0.99, 0.90,  # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (x, y) –≤ –¥–æ–ª—è—Ö –æ—Ç —Ä–∞–∑–º–µ—Ä–æ–≤ –≥—Ä–∞—Ñ–∏–∫–∞ (0.95 ‚Äî –ø–æ—á—Ç–∏ –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É)
                 f'–ú–∏–Ω–∏–º—É–º: {min(values)}',  # –¢–µ–∫—Å—Ç –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏
                 horizontalalignment='right',  # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ –ø—Ä–∞–≤–æ–º—É –∫—Ä–∞—é
                 verticalalignment='top',  # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ –≤–µ—Ä—Ö–Ω–µ–º—É –∫—Ä–∞—é
                 transform=plt.gca().transAxes,  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç (–¥–æ–ª–∏ –≥—Ä–∞—Ñ–∏–∫–∞)
                 fontsize=25, color='white', bbox=dict(facecolor='green', alpha=0.8))
        plt.title(
            "–ì—Ä–∞—Ñ–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –¥–ª—è '{0:.25}'".format(item_search.title),
            fontdict=dict(color='white', fontsize=22)
        )
        plt.xlabel("–ü–µ—Ä–∏–æ–¥", fontdict=dict(color='white', fontsize=25))
        plt.ylabel("–¶–µ–Ω–∞", fontdict=dict(color='white', fontsize=25))
        plt.grid(axis='y', visible=True, linestyle='-', alpha=0.5)
        plt.grid(axis='x', visible=True, linestyle='-', alpha=0.3)
        plt.xticks(timestamps)
        plt.savefig("graph.png")

        msg = f"\r\nüìà max —Ü–µ–Ω–∞ = {max(values)}\t({max_time_value})\r\n"\
              f"üìâ min —Ü–µ–Ω–∞ = {min(values)}\t({min_time_value})\r\n"\
              f"üìÖ —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ = {values[-1]}\t({timestamps[-1]})\r\n"
        await message.answer_photo(FSInputFile("graph.png"), caption=msg)
    except Exception as error:
        print(error)
        await message.answer(str(error))
