import json
from datetime import timedelta
from typing import Any

from redis import asyncio as aioredis

from src.core import conf, config
from src.database.exceptions import CustomError
from src.logger import logger as log


class RedisHandler:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–ø–µ—Ä–∞—Ü–∏–π Redis."""

    def __init__(self):
        self.client = None

    async def connect(self) -> aioredis.Redis:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Redis."""
        try:
            self.client = await aioredis.Redis(host=conf.redis_host)
            ping = await self.client.ping()
            if ping is True:
                return self.client
        except aioredis.ConnectionError:
            msg = "‚ùåüì∂ REDIS –Ω–µ –º–æ–∂–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–≤—è–∑—å."
            log.error_log.error(msg)
            raise CustomError(message=msg)

    async def flush_keys(self) -> None:
        """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ –∫–ª—é—á–∏ –∏–∑ Redis."""
        if not self.client:
            await self.connect()
        keys = await self.client.keys()
        log.info_log.debug(f"REDISüîë {sorted(keys)}")
        await self.client.flushall()
        log.info_log.debug("REDISüö´ keys deleted")
        keys = await self.client.keys()
        log.info_log.debug(f"REDISüîë {sorted(keys)}")

    async def get_data(self, key: str):
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ Redis –ø–æ –∫–ª—é—á—É."""
        if not self.client:
            await self.connect()

        value = await self.client.get(key)
        log.info_log.debug(f"REDISüîë EXIST = {bool(value)}[{key}]")
        return json.loads(value) if value else None

    async def set_data(self, key: str, value: str | dict) -> bool:
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ Redis —Å –∏—Å—Ç–µ—á–µ–Ω–∏–µ–º —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è."""
        if not self.client:
            await self.connect()

        value = json.dumps(value, ensure_ascii=False, indent=4)
        state = await self.client.setex(
            key,
            timedelta(seconds=config.CACHE_LIVE_TIME),
            value=value,
        )
        return state

    async def get_keys(self) -> list:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∫–ª—é—á–∏ –æ—Ç Redis."""
        if not self.client:
            await self.connect()
        keys = await self.client.keys()
        if keys:
            log.info_log.debug(
                "REDIS keys count = {0} {1}".format(
                    len(keys),
                    "\n".join([f"REDIS üîë {k}" for k in sorted(keys)]),
                )
            )
        return keys

    async def get_from_cache(self, cache_key: str):
        """–ü–æ–ª—É—á–∞–µ—Ç –∫—ç—à –∏–∑ Redis."""
        return await self.get_data(cache_key)

    async def set_in_cache(self, cache_key: str, data: Any):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∫—ç—à –≤ Redis."""
        data_list = await self.get_data(cache_key)
        if data_list is None:
            await self.set_data(key=cache_key, value=data)
