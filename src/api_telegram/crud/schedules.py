from typing import Optional

from aiogram import Bot
from aiogram import types as t
from aiogram.exceptions import TelegramBadRequest
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from apscheduler.triggers.interval import IntervalTrigger

from src.api_aliexpress import deserializers, request
from src.api_redis import RedisHandler
from src.api_telegram import CacheKey, JobCBD, MonitorAction, MonitorCBD, Navigation
from src.api_telegram.keyboard.factories import BasePaginationBtn
from src.core import config
from src.database import DataEntry, ItemSearch, exceptions, orm
from src.logger import logger as log
from src.utils.media import get_fs_input_hero_image, get_input_media_hero_image

scheduler = AsyncIOScheduler()


class DefineTargetManger:
    def __init__(self, state_data):
        self.uid = state_data.get("product_id")
        self.target_prise = float(state_data.get("price"))
        self.callback = state_data.get("callback")

    async def define_target(self):
        item_search = await orm.monitoring.get_item_by_id(self.uid)
        await orm.monitoring.update(item_search.uid, self.target_prise)

    async def message(self):
        return "–¶–µ–Ω–∞ {0} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞".format(self.target_prise)

    async def keyboard(self):
        navigate = self.callback.split(":")[2]
        page = self.callback.split(":")[-1]

        kb_data = MonitorCBD(
            action=MonitorAction.list,
            navigate=navigate,
            item_id=self.uid,
            page=page,
        ).pack()
        kb = BasePaginationBtn()
        kb.add_button(kb.btn_data("back", kb_data)).add_markup(1)
        return kb.create_kb()


class ScheduleManager:
    def __init__(self, bot: Bot):
        self.bot: Bot = bot
        self.scheduler = AsyncIOScheduler()
        self.deserializer = deserializers.DeserializedHandler()
        self.redis_handler = RedisHandler()

    def remove_job(self, item_search_id):
        job_id = JobCBD(uid=item_search_id).pack()  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∑–∞–¥–∞—á–∏
        if self.scheduler.get_job(job_id):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–¥–∞—á–∞
            self.scheduler.remove_job(job_id)  # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É
            log.info_log.info(f"–ó–∞–¥–∞—á–∞ {job_id} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞.")
        else:
            log.error_log.error(f"–ó–∞–¥–∞—á–∞ {job_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    async def create_item_search(
        self,
        item_search_id: int,
        user_id: int,
        key: str,
        page: int,
        target_price: Optional[float] = None
    ) -> None:
        """
        –°–æ–∑–¥–∞–µ—Ç –æ–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ `ItemSearch`.

        :param item_search_id: ID —Ç–æ–≤–∞—Ä–∞
        :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :param key: –∫–ª—é—á, –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫—ç—à-–¥–∞–Ω–Ω—ã—Ö
        :param page: —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        :param target_price: —Ü–µ–ª–µ–≤–∞—è —Ü–µ–Ω–∞
        :return: None
        """
        cache_key = CacheKey(key=key, api_page=page, extra="detail").pack()
        response = await self.redis_handler.get_data(cache_key)
        if response is None:
            response = await request.get_data_by_request_to_api(
                params={
                    "itemId": item_search_id,
                    "url": config.URL_API_ITEM_DETAIL,
                }
            )
        item = await self.deserializer.item_for_db(response, user_id)
        item_search = await orm.monitoring.get_item(item_search_id)
        if item_search:
            raise exceptions.CustomError("–¢–æ–≤–∞—Ä —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è")

        # –î–æ–±–∞–≤–ª—è–µ–º target_price –≤ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
        item["target"] = target_price
        await orm.monitoring.create_item(item)

    async def fetch_and_save_data(self, item_search_id: int):
        """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        item_search = await orm.monitoring.get_item_by_id(item_search_id)
        response = await request.get_data_by_request_to_api(
            params={
                "itemId": item_search.product_id,
                "url": config.URL_API_ITEM_DETAIL,
            }
        )

        prices = response.get("result").get("item").get("sku").get("base")[0]
        current_price = float(prices.get("promotionPrice", prices.get("price")))
        item_search = ItemSearch.get_by_id(item_search_id)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É
        DataEntry.create(
            value=current_price,
            item_search=item_search,  # –£–∫–∞–∑—ã–≤–∞–µ–º —Å–≤—è–∑—å —Å ItemSearch
        )
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–≤–æ–π —Ü–µ–Ω—ã –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if item_search.target is not None and current_price <= item_search.target:
            log.info_log.info(
                f"–¶–µ–ª–µ–≤–∞—è —Ü–µ–Ω–∞ {item_search.target} "
                f"–¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ [{item_search.product_id}]"
            )
            await self.send_price_alert(item_search_id, current_price)

    async def _get_keyboard(self) -> t.InlineKeyboardMarkup:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–≤—É–º—è –∫–Ω–æ–ø–∫–∞–º–∏:
            - –Ω–∞–∑–∞–¥ –∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–æ–º—É —Ç–æ–≤–∞—Ä—É;
            - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        :return: –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        """
        kb = BasePaginationBtn()
        button_data = MonitorCBD(
            action=MonitorAction.list, navigate=Navigation.first, page=1
        ).pack()
        buttons = [
            kb.btn_data("list_searches", button_data),
            kb.btn_text("menu"),
        ]
        kb.add_buttons(buttons)
        return kb.create_kb()

    async def send_price_alert(self, item_search_id: int, current_price: float):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —Ü–µ–ª–µ–≤–æ–π —Ü–µ–Ω—ã.

        - –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ.
        - –£–¥–∞–ª—è–µ–º —Ü–µ–ª–µ–≤—É—é —Ü–µ–Ω—É –ø–æ—Å–ª–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        """
        item_search = await orm.monitoring.get_item_by_id(item_search_id)
        if self.bot is None:
            log.error_log.error("Bot –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ")
            return

        try:
            message = (
                "üö® –¶–µ–ª–µ–≤–∞—è —Ü–µ–Ω–∞ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞! üö®\n\n"
                "–¢–æ–≤–∞—Ä: {0:.50}\n"
                "üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {1} ‚ÇΩ\n"
                "üëç –í–∞—à–∞ —Ü–µ–ª–µ–≤–∞—è —Ü–µ–Ω–∞: {2} ‚ÇΩ\n\n".format(
                    item_search.title, current_price, item_search.target
                )
            )
            keyboard = await self._get_keyboard()
            try:
                await self.bot.edit_message_media(
                    chat_id=item_search.user_id,
                    media=await get_input_media_hero_image(
                        value="success", msg=message
                    ),
                    reply_markup=keyboard,
                )
            except TelegramBadRequest:
                await self.bot.send_photo(
                    chat_id=item_search.user_id,
                    caption=message,
                    photo=await get_fs_input_hero_image("success"),
                    reply_markup=keyboard,
                )
            # –£–¥–∞–ª—è–µ–º —Ü–µ–ª–µ–≤—É—é —Ü–µ–Ω—É –ø–æ—Å–ª–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            await orm.monitoring.update(item_search.uid, None)

        except exceptions.CustomError as error:
            log.error_log.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {error}")

    async def sync_scheduler_with_db(self):
        """
        –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á–∏ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ —Å –∑–∞–ø–∏—Å—è–º–∏ ItemSearch –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
        - –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–¥–∞—á–∏ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ;
        - –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö ItemSearch;
        - –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –Ω–æ–≤—ã—Ö ItemSearch.
        """
        existing_item_search_ids = await orm.monitoring.get_all_items()
        jobs_to_remove = []

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–¥–∞—á–∏ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ
        for job in self.scheduler.get_jobs():
            job_item_search_id = job.id
            if job_item_search_id not in existing_item_search_ids:
                jobs_to_remove.append(job.id)

        # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö ItemSearch
        for job_id in jobs_to_remove:
            self.scheduler.remove_job(job_id)
            log.info_log.info(f"–ó–∞–¥–∞—á–∞ {job_id} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞.")
        item_search_list = await orm.monitoring.get_all_items()

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –Ω–æ–≤—ã—Ö ItemSearch
        log.info_log.info(f"–í—Å–µ–≥–æ –∑–∞–¥–∞—á {len(item_search_list)}")
        for item_search in item_search_list:
            job_id = JobCBD(uid=item_search.product_id).pack()
            if not self.scheduler.get_job(job_id):
                self.scheduler.add_job(
                    self.fetch_and_save_data,
                    CronTrigger(hour=config.SCHEDULE_HOUR, minute=config.SCHEDULE_MIN),
                    args=[item_search.uid],
                    # kwargs={'bot': self.bot}
                    id=job_id,
                )
                log.info_log.info(
                    f"–≤—Ä–µ–º—è {config.SCHEDULE_HOUR}:{config.SCHEDULE_MIN}."
                    f"\t–ó–∞–¥–∞—á–∞ {job_id} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫."
                )

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞

    async def setup_scheduler(self) -> None:
        """
        –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ.
        –î–æ–±–∞–≤–ª—è–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –∑–∞–¥–∞—á—É –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç)
        :return: None
        """
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        await self.sync_scheduler_with_db()

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –∑–∞–¥–∞—á—É –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        self.scheduler.add_job(
            func=self.sync_scheduler_with_db,
            # –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 10:30
            # trigger=CronTrigger(day="*/1", hour=10, minute=30),
            # –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
            trigger=IntervalTrigger(minutes=10),
            # args=[self.bot],
            id="sync_scheduler_with_db",
        )

        self.scheduler.start()
