import typing as t

from peewee import Model

from src.database import models as m
from src.database import pydantic


class UserORM:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (ORM —Å–ª–æ–π)."""

    def __init__(self, model: t.Type[m.User]):
        self.model = model

    async def get_or_create(self, user: m.User) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ.

        –ò—â–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω,
        —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.

        :param user - –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å.
        :return str - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
        """
        user, created = self.model.get_or_create(
            user_id=user.id,
            user_name=user.username,
            first_name=user.first_name,
            last_name=user.last_name,
        )
        if created:
            return "üü® ü§ö –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å"
        return "ü§ù –†–∞–¥—ã —Å–Ω–æ–≤–∞ –≤–∏–¥–µ—Ç—å –≤–∞—Å"


class CacheORM:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–ø—Ä–æ—Å–∞–º–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (ORM —Å–ª–æ–π)."""

    def __init__(self, model: t.Type[Model]):
        self.model = model

    async def save_in_db(self, data: dict):
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞ –≤ –ë–î.
        :param data: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞.
        :return: None
        """
        self.model().create(**data).save()

    async def update_in_db(self, data: t.Dict[str, t.Any], key: str) -> None:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞ –≤ –ë–î.
        :param data: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞.
        :param key: –∫–ª—é—á –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫—ç—à-–¥–∞–Ω–Ω—ã—Ö –≤ –ë–î.
        :return: None
        """
        self.model.update(query=data).where(m.CacheData.key == key).execute()

    async def get_from_db(self, key: str) -> t.Optional[m.CacheData]:
        """
        –ë–µ—Ä–µ—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞ –≤ –ë–î.
        :param key: –∫–ª—é—á –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫—ç—à-–¥–∞–Ω–Ω—ã—Ö –≤ –ë–î.
        :return: –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        """
        return self.model.select().where(m.CacheData.key == key).get_or_none()


class FavoriteORM:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–∑–±—Ä–∞–Ω–Ω—ã–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (ORM —Å–ª–æ–π)."""

    def __init__(self, model: t.Type[m.Favorite]):
        self.model = model

    async def create_item(self, data: t.Dict[str, t.Any]) -> None:
        """–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –∏–∑–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä"""
        self.model.create(**data).save()

    async def get_list(self, user_id: int) -> t.List[Model]:
        """–ü–æ–ª—É—á–∏—Ç–µ –≤—Å–µ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω—ã–µ –ø–æ –¥–∞—Ç–µ"""
        return (
            self.model.select()
            .where(self.model.user == user_id)
            .order_by(self.model.date.desc())
        )

    async def get_or_create(self, data: t.Dict[str, t.Any]) -> t.Tuple[Model, bool]:
        """–ü–æ–ª—É—á–∏—Ç–µ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –∏–∑–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä"""
        return self.model.get_or_create(
            product_id=data.get("product_id"),
            title=data.get("title"),
            price=data.get("price"),
            reviews=data.get("reviews"),
            stars=data.get("stars"),
            url=data.get("url"),
            image=data.get("image"),
            user=data.get("user"),
        )

    async def delete(self, item_id: str) -> int:
        """–£–¥–∞–ª–∏—Ç–µ –∏–∑–±—Ä–∞–Ω–Ω—É—é –∑–∞–ø–∏—Å—å –ø–æ ID"""
        return self.model.delete().where(self.model.uid == item_id).execute()

    async def get_item(self, product_id: str) -> t.Optional[Model]:
        """–ü–æ–ª—É—á–∏—Ç–µ –∏–∑–±—Ä–∞–Ω–Ω—É—é –∑–∞–ø–∏—Å—å –ø–æ ID –ø—Ä–æ–¥—É–∫—Ç–∞"""
        return (
            self.model.select().where(self.model.product_id == product_id).get_or_none()
        )


class MonitoringORM:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (ORM —Å–ª–æ–π)."""

    def __init__(self, model: t.Type[m.ItemSearch], sub_model: t.Type[m.DataEntry]):
        self.model = model
        self.sub_model = sub_model

    async def get_list(self, user_id: int):
        """
        –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,
        —É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω—ã–µ –ø–æ –¥–∞—Ç–µ –≤ –ø–æ—Ä—è–¥–∫–µ —É–±—ã–≤–∞–Ω–∏—è
        """
        return (
            self.model.select()
            .where(self.model.user == user_id)
            .order_by(self.model.date.desc())
        )

    async def get_item(self, product_id: str):
        """–ü–æ–ª—É—á–∏—Ç—å –µ–¥–∏–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ product_id"""
        return (
            self.model.select().where(self.model.product_id == product_id).get_or_none()
        )

    async def get_item_by_id(self, uid: str):
        """–ü–æ–ª—É—á–∏—Ç—å –µ–¥–∏–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ ID"""
        return self.model.select().where(self.model.uid == uid).get_or_none()

    async def get_all_items(
        self,
    ):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        return [itm for itm in self.model.select()]

    async def create_item(self, data: dict):
        self.model.create(
            product_id=data.get("product_id"),
            title=data.get("title"),
            price=data.get("price"),
            url=data.get("url"),
            image=data.get("image"),
            user=data.get("user"),
            target=data.get("target"),
        ).save()

    async def delete_item(self, item_id: int):
        """–£–¥–∞–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ –µ–≥–æ ID"""
        self.model.delete().where(self.model.uid == item_id).execute()

    async def get_monitor_data(self, item_search):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–æ–º—É —Ç–æ–≤–∞—Ä—É."""
        return (
            self.sub_model.select()
            .where(self.sub_model.item_search == item_search)
            .order_by(self.sub_model.date)
        )

    async def update(self, item_search_id, target_prise):
        return (
            self.model.update(target=target_prise)
            .where(self.model.uid == item_search_id)
            .execute()
        )


class HistoryORM:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏—Å—Ç–æ—Ä–∏–µ–π –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (ORM —Å–ª–æ–π)."""

    def __init__(self, model: t.Type[m.History]):
        self.model = model

    async def create(self, data: t.Dict[str, t.Any]) -> None:
        """–°–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å."""
        is_exist = await self.get_item(str(data.get("product_id")))
        if not is_exist:
            pydantic.HistoryModel(
                user=data.get("user"),
                product_id=str(data.get("product_id")),
                title=data.get("title"),
                price=float(data.get("price")),
                reviews=int(data.get("reviews")),
                stars=float(data.get("stars")),
                url=data.get("url"),
                image=data.get("image"),
            ).model_dump()
            self.model().create(**data).save()

    async def get_item(self, product_id: str) -> t.Optional[m.History]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞–ø–∏—Å—å –ø–æ product_id."""
        return (
            self.model.select().where(self.model.product_id == product_id).get_or_none()
        )

    async def get_item_by_id(self, item_id):
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞–ø–∏—Å—å –ø–æ ID."""
        return self.model.select().where(self.model.uid == item_id).get_or_none()

    async def get_list(self, user_id: int) -> t.List[m.History]:
        """
        –ü–æ–ª—É—á–∏—Ç–µ –≤—Å–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,
        —É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω—ã–µ –ø–æ –¥–∞—Ç–µ (—Å–Ω–∞—á–∞–ª–∞ —Å–∞–º–∞—è –Ω–æ–≤–∞—è).
        """
        return (
            self.model.select()
            .where(self.model.user == user_id)
            .order_by(self.model.date.desc())
        )


users = UserORM(m.User)
query = CacheORM(m.CacheData)
history = HistoryORM(m.History)
favorite = FavoriteORM(m.Favorite)
monitoring = MonitoringORM(m.ItemSearch, m.DataEntry)
